AzureDevops - June 2023

JSON Basics:
-----------
Why IAC infrastructure as a code?

500 Storage accounts 
Automated way of deployment
Reusable 
Predictable 

DEV:   Aravind left the org
5 Linux VM
2 SQL DB
7 Subnets
2 VNETs
7 NSG
VNET peerings 

Supriya:

TEST

Data types:

String = "Welcome to Azure"
Number = 12
Floating = 15.34
Boolean = True / False

Getting started with ARM Templates:
----------------------------------
Download the VSCode: https://code.visualstudio.com/download
VSCode Extension: Azure Resource Manager (ARM) Tools
				  ARM Template Viewer


Portal
Powershell
AzureCLI

IAC:
ARMTemplates
Terraform 
Bicep

Powershell command to deploy ARMTempaltes:

https://learn.microsoft.com/en-us/azure/azure-resource-manager/templates/deploy-powershell

New-AzResourceGroupDeployment -ResourceGroupName ARMTemplates -TemplateFile .\template.json -TemplateParameterFile .\parameters.json -Verbose

LAB: Add the datadisk to VM
	 https://learn.microsoft.com/en-us/azure/virtual-machines/using-managed-disks-template-deployments

Get the secrets from Keyavult:	 
	 https://learn.microsoft.com/en-us/azure/azure-resource-manager/templates/key-vault-parameter?tabs=azure-cli
	 
Multi Resource Deployment using ARMTemplates:
--------------------------------------------
https://learn.microsoft.com/en-us/azure/azure-resource-manager/templates/parameters

https://learn.microsoft.com/en-us/azure/azure-resource-manager/templates/template-tutorial-create-multiple-instances?tabs=CLI%2Cazure-cli

ARMTemplates functions:

resourcegroup().location


Terraform: IAC 

ARMTemplates											Terraform 
------------											---------
1. IAC Tool 											1. IAC Tool 
2. Specific to Azure 									2. Open source - Azure, AWS, GCP, OCI, datacenter etc 
3. Format - JSON 										3. Format - HCL (Hashicorp configuration language)
4. Extension - .json 									4. Extension - .tf
5. template.json 										5. main.tf
	parameters.json											variables.tf
6. Schema												6. Terraform building blocks:
	contentversion												provider
	parameters													resources 
	variables													outputs
	resources 
	outputs
7. New-AzResourceGroupDeployment						7. Terraform life cycle 
	-ResourceGroupName '' `										Terraform init
	-TemplateFile '' `											Terraform fmt
	-TemplateParameterFile '' `									Terraform validate
	-Verbose													Terraform plan
																Terraform apply 
																Terraform destroy

Getting started with Terraform:
------------------------------
Download terraform - https://developer.hashicorp.com/terraform/downloads
Extract the zip file -> terraform.exe
Copy the terraform.exe file to C:\Windows
to test it -> open the cmd --> type terraform 

Go to vscode -> install extensions: HashiCorp Terraform & Azure Terraform

Terraform providers:
-------------------
Terraform Providers: https://registry.terraform.io/browse/providers

Azure - azurerm
AWS   - aws
GCP   - google

Terraform variables types: https://developer.hashicorp.com/terraform/language/expressions/types


Azure Terraform provider github release notes:
https://github.com/hashicorp/terraform-provider-azurerm/blob/main/CHANGELOG.md

Terraform Datasources:
---------------------

Existing ResourceGroup 
Existing Virtual network
Existing Subnet 

Terraform Import: https://gmusumeci.medium.com/how-to-import-an-existing-azure-resource-in-terraform-6d585f93ea02

copy.index()
count.index

MultiVM deployment ref: https://github.com/azureramakrishna/AzureDevops-Jan2023/blob/main/Terraform/MultiVM/main.tf


<<<<<<< HEAD
develop 					main 
							cherry pick
commit1 (change1)
commit2
commit3

git tags

dev
test
prod 

version 1

project

Azure Pipelines for Terraform:
-----------------------------

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

Azure Pipelines Library:
-----------------------

$vnet1 = Get-AzVirtualNetwork -Name MyVirtualNetwork -ResourceGroupName TestResourceGroup


develop 	-->  	main (cherry-pick)

commit1 
commit2 
commit3 
commit4 


Azure YAML Pipelines:
--------------------
Pipeline as a code 
=======
Agenda:
-------
Terraform Modules - Reusing the exesting configuration

Local module
Remote module


Module - main.tf & variables.tf 

Dev	
Test	
Prod	

terraform variables types
https://developer.hashicorp.com/terraform/language/expressions/types

terraform modules overview
https://developer.hashicorp.com/terraform/language/modules

Module sources
https://developer.hashicorp.com/terraform/language/modules/sources#github

>>>>>>> 7824d0462e0e71c3ce575d7748e5dbaa59e77013
